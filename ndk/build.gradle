apply plugin: 'com.android.library'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'com.jfrog.bintray'
archivesBaseName = "bugsnag-android-ndk"

repositories {
    google()
    mavenCentral()
    jcenter()
}

android {
    compileSdkVersion Integer.parseInt(project.ANDROID_COMPILE_SDK_VERSION)

    defaultConfig {
        // Note minSdkVersion must be >=21 for 64 bit architectures
        minSdkVersion Integer.parseInt(project.ANDROID_MIN_SDK_VERSION)
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        ndk {
            abiFilters 'arm64-v8a', 'armeabi-v7a', 'armeabi', 'x86', 'x86_64'
        }
        consumerProguardFiles 'proguard-rules.pro'
        externalNativeBuild {
            cmake {
                arguments '-DANDROID_CPP_FEATURES=exceptions',
                          '-DANDROID_STL=c++_static'
            }
        }
    }

    externalNativeBuild {
        cmake {
            path 'CMakeLists.txt'
        }
    }
    buildTypes {
        debug {
            testCoverageEnabled = true
        }
    }
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            outputs.upToDateWhen {false}
            showStandardStreams = true
            info.events = ['passed', 'skipped', 'failed', 'standardOut', 'standardError']
        }
    }
}

dependencies {
    api project(':sdk')
    api "com.android.support:support-annotations:$supportLibVersion"
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "com.android.support.test:runner:$supportTestVersion", {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation "com.android.support.test:rules:$supportTestVersion", {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$espressoVersion", {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:all" << "-Werror"
    }
}

coveralls {
    jacocoReportPath = "$buildDir/reports/coverage/debug/report.xml"
}
apply from: "../checkstyle.gradle"
version = "${project.VERSION_NAME}"
group = "${project.GROUP}"

// Tasks to release the library to maven central
task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}
publishing {
    repositories {
        maven {
            if (VERSION_NAME.contains("SNAPSHOT")) {
                url 'https://oss.sonatype.org/content/repositories/snapshots/'
            } else {
                url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            }
            credentials {
                username = project.hasProperty("NEXUS_USERNAME") ? "$NEXUS_USERNAME" : System.getenv("NEXUS_USERNAME")
                password = project.hasProperty("NEXUS_PASSWORD") ? "$NEXUS_PASSWORD" : System.getenv("NEXUS_PASSWORD")
            }
        }
    }

    publications {
        NDK(MavenPublication) {
            groupId 'com.bugsnag'
            artifactId 'bugsnag-android-ndk'
            version "${project.VERSION_NAME}"
            artifact(sourceJar)
            artifact("$buildDir/outputs/aar/bugsnag-android-ndk-release.aar")

            pom.withXml {
                Node root = asNode()

                // top-level metadata
                Node packaging = root.get('packaging').first()
                packaging.value = project.POM_PACKAGING
                root.appendNode('name', 'Bugsnag Android NDK')
                root.appendNode('description', project.POM_DESCRIPTION)
                root.appendNode('url', project.POM_URL)

                // licenses
                Node licenseNode = root.appendNode('licenses').appendNode('license')
                licenseNode.appendNode('name', project.POM_LICENCE_NAME)
                licenseNode.appendNode('url', project.POM_LICENCE_URL)
                licenseNode.appendNode('distribution', project.POM_LICENCE_DIST)

                // developers
                Node devNode = root.appendNode('developers').appendNode('developer')
                devNode.appendNode('id', project.POM_DEVELOPER_ID)
                devNode.appendNode('name', project.POM_DEVELOPER_NAME)

                // scm
                Node scmNode = root.appendNode('scm')
                scmNode.appendNode('connection', project.POM_SCM_CONNECTION)
                scmNode.appendNode('developerConnection', project.POM_SCM_DEV_CONNECTION)
                scmNode.appendNode('url', project.POM_SCM_URL)

                def dependenciesNode = root.appendNode('dependencies')

                // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included in the pom.
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        def name = it.name == 'sdk' ? 'bugsnag-android' : it.name
                        def version = it.name == 'sdk' ? project.VERSION_NAME : it.version
                        dependencyNode.appendNode('artifactId', name)
                        dependencyNode.appendNode('version', version)
                        dependencyNode.appendNode('scope', 'compile')
                    }
                }
            }
        }
    }
}
signing {
    sign publishing.publications
}

bintray {
    user = project.hasProperty("bintray_user") ? "$bintray_user" : System.getenv("bintray_user")
    key = project.hasProperty("bintray_api_key") ? "$bintray_api_key" : System.getenv("bintray_api_key")
    publications = ['NDK']
    configurations = ['archives']

    pkg {
        repo = 'maven'
        name = 'bugsnag-android-ndk'
        userOrg = 'bugsnag'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/bugsnag/bugsnag-android.git'

        version {
            name = "${project.VERSION_NAME}"
            vcsTag = "v${project.VERSION_NAME}"
        }
    }
}

