apply plugin: "maven-publish"
apply plugin: "signing"

String pomName = project.getProperties().get("pomName")
archivesBaseName = project.getProperties().get("artefactId")
version = "${project.VERSION_NAME}"
group = "${project.GROUP}"

def expectedAbiLists = // Controls which combinations of ABIs are expected for release
[
    ["arm64-v8a", "armeabi", "armeabi-v7a", "x86", "x86_64"] as Set,
    ["armeabi-v7a", "x86"] as Set
]

// Disable doclint:
// https://github.com/GPars/GPars/blob/312c5ae87605a0552bc72e22e3b2bd2fa1fdf98c/build.gradle#L208-L214
if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        // disable the crazy super-strict doclint tool in Java 8
        //noinspection SpellCheckingInspection
        options.addStringOption("Xdoclint:none", "-quiet")
    }
}

task javadoc(type: Javadoc) {
    description = "Generates javadocs, ignoring any doclint errors, and places the artefact in the root of the project"
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("docs")
    failOnError false
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}

task validatePublishOptions() {
    description = "Ensures assembleRelease is run with the correct NDK library version and ABI list"
    doFirst {
        if (project.android.defaultConfig.ndk.abiFilters != null) {
            for (abiList in expectedAbiLists) {
                if (abiList == project.android.defaultConfig.ndk.abiFilters as Set) {
                    return
                }
            }
            throw new GradleException("Unexpected list of ABIs for release: ${project.android.defaultConfig.ndk.abiFilters}")
        }
    }
}

project.afterEvaluate {
    tasks.named("publish").configure { task ->
        task.dependsOn(validatePublishOptions)
    }
}

// https://developer.android.com/studio/build/maven-publish-plugin
project.afterEvaluate {
    publishing {

        repositories {
            maven {
                if (VERSION_NAME.contains("SNAPSHOT")) {
                    url "https://oss.sonatype.org/content/repositories/snapshots/"
                } else {
                    url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                }
                credentials {
                    username = project.hasProperty("NEXUS_USERNAME") ? "$NEXUS_USERNAME" : System.getenv("NEXUS_USERNAME")
                    password = project.hasProperty("NEXUS_PASSWORD") ? "$NEXUS_PASSWORD" : System.getenv("NEXUS_PASSWORD")
                }
            }
        }

        publications {

            SDK(MavenPublication) {
                from components.release
                groupId = "com.bugsnag"
                artifactId = archivesBaseName
                version = version
                artifact(sourceJar)

                pom {
                    name = pomName
                    description = project.POM_DESCRIPTION
                    url = project.POM_URL
                    licenses {
                        license {
                            name = project.POM_LICENCE_NAME
                            url = project.POM_LICENCE_URL
                            distribution = project.POM_LICENCE_DIST
                        }
                    }
                    developers {
                        developer {
                            id = project.POM_DEVELOPER_ID
                            name = project.POM_DEVELOPER_NAME
                        }
                    }
                    scm {
                        connection = project.POM_SCM_CONNECTION
                        developerConnection = project.POM_SCM_DEV_CONNECTION
                        url = project.POM_SCM_URL
                    }
                }
            }
        }
    }

    signing {
        sign publishing.publications
    }
}
