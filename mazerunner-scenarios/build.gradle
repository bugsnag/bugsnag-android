apply plugin: 'com.android.library'

buildscript {
    repositories {
        google()
        mavenCentral()
        jcenter()
    }
    ext.kotlin_version = '1.3.21'

    dependencies {
        classpath 'com.android.tools.build:gradle:3.4.2'
        classpath 'com.bugsnag:bugsnag-android-gradle-plugin:4.5.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:1.0.0-RC16"
    }
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"
apply plugin: "io.gitlab.arturbosch.detekt"

repositories {
    mavenLocal()
    google()
    mavenCentral()
    jcenter()
}

android {
    compileSdkVersion 28
    defaultConfig.minSdkVersion 14

    externalNativeBuild {
        cmake {
            path 'CMakeLists.txt'
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
}

boolean isRunningMazerunner = true

dependencies {
    try {
        compileOnly project(":bugsnag-android")
        isRunningMazerunner = false
    } catch (Throwable exc) {
        implementation "com.bugsnag:bugsnag-android:+"
        project.logger.lifecycle("Ignoring unfound dependency as running from mazerunner")
    }
}

apply from: "../gradle/detekt.gradle"
apply from: "../gradle/checkstyle.gradle"

// copy the SO files from the NDK module to the mazerunner module directory, so that
// we can link against a local copy when assembling the whole repository to check
// the scenarios compile

task extractBugsnagLibs(type: Copy) {
    if (isRunningMazerunner) { // extracted from the m2
        return
    }
    from zipTree("${project.rootDir}/bugsnag-plugin-android-ndk/build/outputs/aar/bugsnag-plugin-android-ndk-release.aar")
    into "${project}/build/intermediates/bugsnag-libs"
    include "**"
}

project.afterEvaluate {
    def cleanTasks = project.tasks.findAll {
        it.name.startsWith("externalNative") && it.name.contains("Clean")
    }
    def buildTasks = project.tasks.findAll {
        it.name.startsWith("externalNative") && it.name.contains("Build") && !it.name.contains("Clean")
    }

    buildTasks.forEach {
        extractBugsnagLibs.mustRunAfter(cleanTasks)
        it.dependsOn extractBugsnagLibs
        it.doFirst { extractBugsnagLibs }
    }
}